#!groovy

@Library("Infrastructure")

def type = "java"
def product = "pip"
def component = "data-management"
def kv = product + '-ss-kv'

def setupTestSecrets() {
  def bootstap_env = env.ENV == "prod" || env.ENV == "demo" || env.ENV == "sbox" ? env.ENV : "stg"
  azureKeyVault(
    keyVaultURL: "https://pip-bootstrap-${bootstap_env}-kv.vault.azure.net/",
    secrets: [
      secret('app-pip-data-management-id', 'CLIENT_ID'),
      secret('app-pip-data-management-pwd', 'CLIENT_SECRET'),
      secret('app-pip-data-management-scope', 'APP_URI'),
      secret('app-pip-subscription-management-scope', 'SUBSCRIPTION_MANAGEMENT_AZ_API'),
      secret('app-pip-account-management-scope', 'ACCOUNT_MANAGEMENT_AZ_API'),
      secret('app-pip-publication-services-scope', 'PUBLICATION_SERVICES_AZ_API'),
      secret('app-tenant', 'TENANT_ID'),
      secret('test-user-id', 'TEST_USER_ID'),
      secret('b2c-test-system-admin-account-provenance-id', 'SYSTEM_ADMIN_PROVENANCE_ID'),
    ]) {
    env.CLIENT_ID = "${CLIENT_ID}"
    env.CLIENT_SECRET = "${CLIENT_SECRET}"
    env.APP_URI = "${APP_URI}"
    env.SUBSCRIPTION_MANAGEMENT_AZ_API = "${SUBSCRIPTION_MANAGEMENT_AZ_API}"
    env.ACCOUNT_MANAGEMENT_AZ_API = "${ACCOUNT_MANAGEMENT_AZ_API}"
    env.PUBLICATION_SERVICES_AZ_API = "${PUBLICATION_SERVICES_AZ_API}"
    env.SYSTEM_ADMIN_PROVENANCE_ID = "${SYSTEM_ADMIN_PROVENANCE_ID}"
    env.TENANT_ID = "${TENANT_ID}"
    env.TEST_USER_ID = "${TEST_USER_ID}"
  }
}

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {

  onMaster() {
    env.ENV = 'stg'
  }
  onPR() {
    env.ENV = 'dev'
  }
  onDemo {
    env.ENV = 'demo'
  }
  onPerftest {
    env.ENV = 'perftest'
  }
  onIthc {
    env.ENV = 'ithc'
  }

  setupTestSecrets()
  enableDbMigration(kv)
  enableSlackNotifications('#pip-build-notices')
  enableAksStagingDeployment()
  disableLegacyDeployment()
  enableApiGatewayTest()

   def branchName = env.CHANGE_BRANCH ?: env.BRANCH_NAME
   before('test') {
    sh "echo 'Validate Swaggr'"
    sh swaggerValidate(branchName)
  }
}

static String swaggerValidate(String branchName){
  def repoName = "pip-data-management"
  def swaggerPath = "infrastructure/resources/swagger/api-swagger.json"
  def script = 'url="https://raw.githubusercontent.com/hmcts/' + repoName + '/' + branchName + '/' + swaggerPath + '";' +
  'CHECK=$(curl -X "GET" "https://validator.swagger.io/validator/debug?url=\${url}" --silent);' +
  'if [[ "\$CHECK" != "{}" ]]; then' +
  '  echo -e "\\nSorry this is an invalid Swagger:\\n\$CHECK\\n";' +
  '  exit 1;' +
  'fi;'

  return script;

}
